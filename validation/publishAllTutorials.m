function publishAllTutorials

    verbosity = 1;
    
    % Directory where tutorial scripts are locaetd
    tutorialsDir = fullfile(isetbioRootPath, 'tutorials');
    
    % Directory where the gh-pages branch is located
    ghPagesCloneDir = getpref('isetbioValidation', 'clonedGhPagesLocation');
    
    % Directory where the wiki is cloned
    wikiCloneDir = getpref('isetbioValidation', 'clonedWikiLocation');
    
    % Add here any scripts you do not wish to be run and published
    scriptsToSkip = {...
       % 't_codeROI.m' ... % requires user input
       % 't_coneAdapt.m' ...  % takes too long
    };
    

    % get the rootDirectory
    rootDirectory = fileparts(which(mfilename()));
    
    % assemble the directory where the tutorial HTML files will go
    tutorialsHTMLdir = fullfile(ghPagesCloneDir, 'tutorialdocs');
    
    % cd to wikiCloneDir and do a git pull before any file updating
    cd(wikiCloneDir);
    issueGitCommand('git pull', verbosity);
    
    % cd to tutorialsHTMLdir and do a git pull before any file updating
    cd(tutorialsHTMLdir);
    issueGitCommand('git pull', verbosity);
    
    cd(rootDirectory);
    
    
    % generate tutorialsHTMLdir
    if (exist(tutorialsHTMLdir, 'dir')==7)
        if (verbosity > 1)
            fprintf('Removing previously existing dir ''%s''\n', tutorialsHTMLdir);
        end
        system(sprintf('rm -r -f %s',tutorialsHTMLdir));
    end    
    mkdir(tutorialsHTMLdir);
    
    % Open new tutorialsCatalogFile
    tutorialsCatalogFile = 'Tutorials.md';
    tutorialsCatalogFileFID = fopen(fullfile(wikiCloneDir, tutorialsCatalogFile),'w');
    fprintf(tutorialsCatalogFileFID,'***\n_This file is autogenerated by the ''pulishAllTutorials'' script. Do not edit manually, as all changes will be overwritten during the next run. **Last run performed on %s**._\n***', datestr(now));
    
    % Start running and publishing
    existingSectionNames = {};
    filesList = getContents(tutorialsDir, {});
    
    for k = 1:numel(filesList)
        % close all figures
        close all;
        
        skipThisOne = false;
        for l = 1:numel(scriptsToSkip)
            s = scriptsToSkip{l};
            if (strfind(filesList{k}, s))
                skipThisOne = true;
            end
        end
            
        if (skipThisOne)
            fprintf(2,'[%2d]. Skipping script ''%s''\n', k, filesList{k});
            continue;
        end
        
        
        % get script name and publish it
        scriptName = filesList{k};
        fprintf('[%2d]. Running and publishing script ''%s''\n', k, scriptName);
        
        runtimeError = false;
        try
            options.catchError = false;
            HTMLfile = publish(scriptName, options);
        catch err
            fprintf(2, '\tScript ''%s'' raised a runtime error (''%s'')\n', scriptName, err.message);
            runtimeError = true;
        end
        
        if (runtimeError)
            continue;
        end
        
        % generate targetHTMLDir
        idx = strfind(HTMLfile, '/html/');
        sourceHTMLdir = HTMLfile(1:idx+length('/html/')-2);
        sectionAndScript = scriptName(length(tutorialsDir)+1:end-2);
        targetHTMLDir = fullfile(tutorialsHTMLdir, sectionAndScript);
        
        if (exist(targetHTMLDir, 'dir')==7)
            if (verbosity > 1)
                fprintf('Removing previously existing dir ''%s''\n', targetHTMLDir);
            end
            system(sprintf('rm -r -f %s',targetHTMLDir));
        end
        if (verbosity > 1)
            fprintf('Generating ''%s'' directory\n', targetHTMLDir);
        end
        mkdir(targetHTMLDir);
        
        % mv sourceHTMLdir contents to targetHTMLDir
        syscommand = sprintf('mv %s/* %s/', sourceHTMLdir, targetHTMLDir);
        if (verbosity > 1)
            fprintf('Executing %s\n',  syscommand);
        end
        system(syscommand);
        
        % rm sourceHTMLdir
        syscommand = sprintf('rm -r -f %s', sourceHTMLdir);
        system(syscommand);
        
        if (verbosity > 1)
            % feedback to user
            fprintf('''%s'' -> ''%s'' \n',  scriptName, targetHTMLDir);
        end
        
        % update tutorialsCatalogFile
        idx = strfind(sectionAndScript, '/');
        sectionName     = sectionAndScript(2:idx(2)-1);
        smallScriptName = sectionAndScript(idx(2)+1:end);
        tutorialURL     = sprintf('http://isetbio.github.io/isetbio/tutorialdocs/%s/%s/%s.html', sectionName, smallScriptName, smallScriptName);
        if (~ismember(sectionName, existingSectionNames))
            existingSectionNames{numel(existingSectionNames)+1} = sectionName;
            % write sectionName
            fprintf(tutorialsCatalogFileFID,'\n####  %s \n', sectionName);
        end
        % Add entry to tutorialsCatalogFile
        fprintf(tutorialsCatalogFileFID, '* [ %s ](%s) \n',  smallScriptName, tutorialURL);  
            
    end  % k
    
    % Close the tutorialsCatalogFileFID
    fclose(tutorialsCatalogFileFID);
    
    cd(tutorialsHTMLdir);
    
    % -------- Push the HTML tutorial datafiles ---------
    cd(tutorialsHTMLdir);
    
    issueGitCommand('git config --global push.default matching', verbosity);

    % Stage everything
    issueGitCommand('git add -A', verbosity);
    
    % Commit everything
    issueGitCommand('git commit -a -m "Tutorials docs update";', verbosity);
    % Push to remote
    issueGitCommand('git push  origin gh-pages',verbosity);
    
    
    
    
    % ---------- Push the tutorials catalog -------------
    cd(wikiCloneDir);
    
    issueGitCommand('git config --global push.default matching', verbosity);
    
    % Stage everything
    issueGitCommand('git add -A', verbosity);
    

    % Commit everything
    issueGitCommand('git commit  -a -m "Tutorials catalog update";', verbosity);
    % Push to remote
    issueGitCommand('git push', verbosity);
    
    % All done. Return to root directory
    cd(rootDirectory);
end

function updatedFileList = getContents(directory, fileList)
    oldFileList = fileList;
    cd(directory);
    
    % look for m-files
    contents = dir('*.m');
    for k = 1:numel(contents)
        oldFileList{numel(oldFileList)+1} = fullfile(directory,contents(k).name);
    end
    
    % look for subdirs
    contents = dir;
    for k = 1:numel(contents)
        if (contents(k).isdir) && (~strcmp(contents(k).name, '.')) && (~strcmp(contents(k).name, '..')) && (~strcmp(contents(k).name, 'html'))
           oldFileList = getContents(fullfile(directory,contents(k).name), oldFileList); 
        end
    end
    
    updatedFileList = oldFileList;
end


% Method to issue a git command with output capture
function issueGitCommand(commandString, verbosity)

    [status,cmdout] = system(commandString,'-echo');
    
    if (verbosity > 1)
        disp(cmdout)
    end
end
